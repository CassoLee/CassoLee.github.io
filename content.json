[{"title":"拜占庭将军问题","date":"2018-10-12T12:59:05.000Z","path":"2018/10/12/拜占庭将军问题/","text":"","tags":[]},{"title":"工作量证明原理","date":"2018-10-12T12:58:53.000Z","path":"2018/10/12/工作量证明原理/","text":"","tags":[]},{"title":"八皇后问题递归算法","date":"2018-10-12T12:07:05.000Z","path":"2018/10/12/八皇后问题递归算法/","text":"八皇后问题的递归实现： package com.woqu.payment.constant; import java.util.ArrayList;import java.util.List; public class NQueenProblem { private static int n=8;//n皇后问题 private static int total=0;//解法计数 /** * 递归算法分析皇后可占位情况 * @param queen */ public static void analyse(List&lt;Integer[]&gt; queen){ if(queen==null){ queen = new ArrayList&lt;Integer[]&gt;(); } int length = queen.size(); boolean[] rank = render(queen); Integer[] currentqueen={-1, -1}; for(int i=0; i&lt;n; i++){ if(rank[i]){//满足条件 currentqueen[0]=i; currentqueen[1]=length; queen.add(currentqueen); if(length==n-1){//到达最后一行 total++; print(queen); } else{ analyse(queen);//递归分析下一皇后的占位 } queen.remove(currentqueen);//恢复上次递归时的占位状态 } } } /** * 根据当前皇后占位情况返回下一行中皇后的可占位情况 * @param queen * @return */ public static boolean[] render(List&lt;Integer[]&gt; queen){ boolean[] rank = new boolean[n]; for(int i=0; i&lt;n; i++){ rank[i]=true; } int y = 0; if(queen!=null){ y = queen.size(); } for(int x=0; x&lt;n; x++){ for(int i=0; i&lt;y; i++){ if(x==queen.get(i)[0]|| x-queen.get(i)[0]==y-queen.get(i)[1]|| x-queen.get(i)[0]==queen.get(i)[1]-y){ rank[x]=false; break; } } } return rank; } /** * 占位可视化 * @param queen */ public static void print(List&lt;Integer[]&gt; queen){ System.out.println(&quot;--------&quot;); for(int y=0; y&lt;queen.size(); y++){ for(int x=0; x&lt;queen.size(); x++){ if(x==queen.get(y)[0] &amp;&amp; y== queen.get(y)[1]){ System.out.print(&quot;o &quot;); } else{ System.out.print(&quot;x &quot;); } } System.out.println(); } System.out.println(&quot;--------&quot;); } public static void main(String[] args) { long time1 = System.currentTimeMillis(); NQueenProblem.n=8; NQueenProblem.total=0; analyse(null); System.out.println(&quot;solutions: &quot;+total); long time2 = System.currentTimeMillis(); System.out.println(&quot;spent time: &quot;+(time2-time1)+&quot;ms&quot;); } }","tags":[{"name":"算法，递归","slug":"算法，递归","permalink":"https://www.superlee.wang/tags/算法，递归/"}]},{"title":"支付系统开发过程中遇到的问题总结","date":"2018-06-29T10:04:49.000Z","path":"2018/06/29/支付系统开发过程中遇到的问题总结/","text":"支付系统中可能会遇到的问题包括：有空再写。。。","tags":[{"name":"开发问题总结","slug":"开发问题总结","permalink":"https://www.superlee.wang/tags/开发问题总结/"}]},{"title":"hey,man","date":"2018-06-15T02:31:14.000Z","path":"2018/06/15/hey-man/","text":"hey~","tags":[{"name":"哈哈","slug":"哈哈","permalink":"https://www.superlee.wang/tags/哈哈/"}]},{"title":"Hello World","date":"2016-06-11T08:15:41.000Z","path":"2016/06/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]