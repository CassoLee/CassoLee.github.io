<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CassoLee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.superlee.wang/"/>
  <updated>2019-01-25T06:23:43.653Z</updated>
  <id>https://www.superlee.wang/</id>
  
  <author>
    <name>Super Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.superlee.wang/2019/01/25/java%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"/>
    <id>https://www.superlee.wang/2019/01/25/java实现图片合成/</id>
    <published>2019-01-25T06:23:08.450Z</published>
    <updated>2019-01-25T06:23:43.653Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: java实现图片合成<br>date: 2019-01-25 14:23:08<br>tags:<br>package com.tourstock.marketing.utils.wish;<br>import java.awt.BasicStroke;<br>import java.awt.Color;<br>import java.awt.Font;<br>import java.awt.FontMetrics;<br>import java.awt.Graphics2D;<br>import java.awt.Shape;<br>import java.awt.geom.RoundRectangle2D;<br>import java.awt.image.BufferedImage;<br>import java.io.File;<br>import java.util.Hashtable;<br>import java.util.LinkedHashMap;<br>import java.util.Map;<br>import java.util.Map.Entry;</p><p>import javax.imageio.ImageIO;</p><p>import org.apache.log4j.Logger;</p><p>import com.google.zxing.BarcodeFormat;<br>import com.google.zxing.EncodeHintType;<br>import com.google.zxing.MultiFormatWriter;<br>import com.google.zxing.WriterException;<br>import com.google.zxing.client.j2se.MatrixToImageWriter;<br>import com.google.zxing.common.BitMatrix;<br>import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;<br>import com.tourstock.common.util.Json; </p><p>/**</p><ul><li>二维码工具类</li><li><p>*/<br>public class QRCodeUtil {<br> private static Logger logger = Logger.getLogger(QRCodeUtil.class);</p><p> private static final String CHARSET = “utf-8”;<br> private static final String FORMAT_NAME = “JPG”; </p><p> public static String GenarateImage(String content, ErrorCorrectionLevel level) throws Exception {</p><pre><code>String topic = &quot;我有一个心愿&quot;;String words = &quot;旅游&quot;;String partner = &quot;朋友&quot;;String destination = &quot;纽约&quot;;String sentence = &quot;我想带%s去%s&quot;;Map&lt;String,Object[]&gt; wishInfoMap = new LinkedHashMap&lt;String,Object[]&gt;();wishInfoMap.put(sentence, new String[] {partner, destination});wishInfoMap.put(words, new String[] {});wishInfoMap.put(&quot;&quot;, new String[] {topic});String fileUrl = &quot;D:\\BaiduNetdiskDownload\\&quot; + &quot;lulutrip.jpg&quot;; File file = new File(fileUrl); BufferedImage bgp = ImageIO.read(file); int bgpWidth = bgp.getWidth(null);int qrCodeSize = (int) (bgpWidth*0.35);BufferedImage qr = genarateQrCode(content, qrCodeSize, level);insertImage(bgp, qr, wishInfoMap);ImageIO.write(bgp, FORMAT_NAME, new File(&quot;D:\\BaiduNetdiskDownload&quot;+&quot;\\&quot;+&quot;lulutripcopy.jpg&quot;));//        ByteArrayOutputStream bos = new ByteArrayOutputStream();//        ImageIO.write(bgp, FORMAT_NAME, bos);//利用ImageIO类提供的write方法，以图片的数据模式写入流//        byte b[] = bos.toByteArray();//        return Base64.getEncoder().encodeToString(b);return null;</code></pre><p> }</p><p> public static BufferedImage genarateQrCode(String content, int qrCodeSize, ErrorCorrectionLevel level) throws WriterException{</p><pre><code>Hashtable&lt;EncodeHintType, Object&gt; hints = new Hashtable&lt;EncodeHintType, Object&gt;(); hints.put(EncodeHintType.ERROR_CORRECTION, level); hints.put(EncodeHintType.CHARACTER_SET, CHARSET); hints.put(EncodeHintType.MARGIN, 0); BitMatrix bitMatrix = new MultiFormatWriter().encode(content,         BarcodeFormat.QR_CODE, qrCodeSize, qrCodeSize, hints); BufferedImage image = MatrixToImageWriter.toBufferedImage(bitMatrix);return image;</code></pre><p> }</p></li></ul><pre><code>private static void insertImage(BufferedImage bgp, BufferedImage qr,Map&lt;String,Object[]&gt; wishInfoMap) throws Exception {     if (qr==null) {         logger.error(&quot;二维码图片不存在！&quot;);         return;     }     int bgpWidth = bgp.getWidth(null);     int bgpHeight = bgp.getHeight(null);     // 插入二维码     Graphics2D graph = bgp.createGraphics();     int QRCODE_X = (int) (bgpWidth*0.333);     int QRCODE_Y = (int) (bgpHeight*0.557);     graph.drawImage(qr, QRCODE_X, QRCODE_Y, qr.getWidth(null), qr.getWidth(null), null);     Shape shape = new RoundRectangle2D.Float(QRCODE_X, QRCODE_Y, bgpWidth, bgpWidth, 6, 6);     graph.setStroke(new BasicStroke(3f));     graph.draw(shape);    //插入心愿信息    Font font = DefinedFont.getDefinedFont(&quot;FZMiaoWuJ&quot;, 180.0f);    graph.setFont(font);    int wishInfoY = (int) (bgpHeight*0.52);    for(Entry&lt;String, Object[]&gt; entry : wishInfoMap.entrySet()) {        int lineWords = getLineWords(graph, bgpWidth);        Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt; criticalIndexMap = getCriticalIndexMap(lineWords, entry.getKey(), entry.getValue());        String sentence = String.format(entry.getKey(), entry.getValue());        LinkedHashMap&lt;Integer, Integer&gt; lineIndexMap = getLineIndexMap(lineWords, sentence);        wishInfoY = drawWishInfo(graph, bgpWidth, wishInfoY, sentence, lineIndexMap, criticalIndexMap);    }    graph.dispose();}private static int drawWishInfo(Graphics2D graph, int bgpWidth, Integer wishInfoY, String sentence, LinkedHashMap&lt;Integer, Integer&gt; lineIndexMap, Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt;criticalIndexMap) {    Font font = graph.getFont();    FontMetrics metrics = graph.getFontMetrics(font);    int lineNum = lineIndexMap.size()-1;//倒数第一行    for(Entry&lt;Integer, Integer&gt; entry : lineIndexMap.entrySet()) {        int drawIndex = 0;        String lineWord = sentence.substring(entry.getKey(), entry.getValue()+1);        int drawWidth = metrics.stringWidth(lineWord);        int wishInfoX = (bgpWidth-drawWidth)/2;        LinkedHashMap&lt;Integer, Integer&gt; criticalMap = criticalIndexMap.get(lineNum);        if(criticalMap!=null &amp;&amp; criticalMap.size()&gt;0) {            for(Entry&lt;Integer, Integer&gt; criticalEntry : criticalMap.entrySet()) {                int criticalStart = criticalEntry.getKey();                int criticalEnd = criticalEntry.getValue();                if(drawIndex != criticalEntry.getKey()){                    graph.setColor(new Color(255, 255, 255));                    String drawWord = lineWord.substring(drawIndex, criticalStart);                    graph.drawString(drawWord, wishInfoX, wishInfoY);                    drawIndex = criticalStart;                    wishInfoX += metrics.stringWidth(drawWord);                }                graph.setColor(new Color(255, 244, 0));                String drawWord = lineWord.substring(drawIndex, criticalEnd+1);                graph.drawString(drawWord, wishInfoX, wishInfoY);                drawIndex = criticalEnd+1;                wishInfoX += metrics.stringWidth(drawWord);            }        }        else {            graph.setColor(new Color(255, 255, 255));            graph.drawString(lineWord, wishInfoX, wishInfoY);        }        lineNum--;//向上一行        wishInfoY -= metrics.getHeight();//向上一行后的垂直高度    }    return wishInfoY;}private static LinkedHashMap&lt;Integer, Integer&gt; getLineIndexMap(int lineWords, String wishInfo){    LinkedHashMap&lt;Integer, Integer&gt; indexMap = new LinkedHashMap&lt;Integer, Integer&gt;();    int len = wishInfo.length();    for(int i=len;i&gt;=0;i--) {        if(i%lineWords==0) {            int endIndex = i+lineWords-1;            if(endIndex &gt; len-1) {                endIndex = len-1;            }            indexMap.put(i, endIndex);        }    }    return indexMap;}private static Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt; getCriticalIndexMap(int lineWords, String sentence, Object... words) {    String wishInfo = String.format(sentence, words);    Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt; criticalIndexMap = new LinkedHashMap&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt;();    if(words != null &amp;&amp; words.length &gt; 0) {        for(int i=0; i&lt;words.length; i++) {            String word = String.valueOf(words[i]);            int startIndex = wishInfo.indexOf(word);//关键词开始位置            int lineNum = startIndex/lineWords;//关键词所在行数            int wordLen = word.length();            int endIndex = startIndex + wordLen - 1;//关键词结束位置            if(startIndex + 1 &gt; lineWords || endIndex+1 &gt; lineWords) {                int lineStartIndex = startIndex%lineWords;                while(lineNum&lt;=endIndex/lineWords) {                    if(lineNum == endIndex/lineWords) {//最后一行                        putMap(criticalIndexMap, lineNum, lineStartIndex, endIndex%lineWords);                    }                    else {                        putMap(criticalIndexMap, lineNum, lineStartIndex, lineWords-1);                    }                    lineNum++;                    lineStartIndex = 0;                }            }            else {                putMap(criticalIndexMap, lineNum, startIndex, endIndex);            }        }    }    return criticalIndexMap;}private static void putMap(Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt; criticalIndexMap, int lineNum, int startIndex, int endIndex) {    if(criticalIndexMap.get(lineNum) == null) {        criticalIndexMap.put(lineNum, new LinkedHashMap&lt;Integer, Integer&gt;());    }    criticalIndexMap.get(lineNum).put(startIndex, endIndex);}private static int getLineWords(Graphics2D graph, int bgpWidth) {    Font font = graph.getFont();    FontMetrics metrics = graph.getFontMetrics(font);    int len = 0;    StringBuffer sb = new StringBuffer();    while(metrics.stringWidth(sb.append(&quot;路&quot;).toString()) &lt;= bgpWidth) {        len++;    }    return len;}/** * 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常) * @author lanyuan * Email: mmm333zzz520@163.com * @date 2013-12-11 上午10:16:36 * @param destPath 存放目录 */ public static void mkdirs(String destPath) {     File file =new File(destPath);         //当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)     if (!file.exists() &amp;&amp; !file.isDirectory()) {         file.mkdirs();     } } public static void main(String[] args) throws Exception {     String text = &quot;http://www.lulutrip.com&quot;;     //        QRCodeUtil.createImage(text, new URL(&quot;http://www.quimg.com/m/logo/logo60x60.png&quot;), false);     System.out.println(QRCodeUtil.GenarateImage(text,ErrorCorrectionLevel.M));    //        String sentence = &quot;我想带%s去%s&quot;;    //        Map&lt;String,Object[]&gt; wishInfoMap = new HashMap&lt;String,Object[]&gt;();    //        wishInfoMap.put(sentence, new String[] {&quot;朋友&quot;, &quot;纽约&quot;});    //        Map&lt;Integer, LinkedHashMap&lt;Integer, Integer&gt;&gt; map = getCriticalIndexMap(5, sentence, new String[] {&quot;朋友&quot;, &quot;纽约&quot;});</code></pre><p>//                        LinkedHashMap&lt;Integer, Integer&gt; m = getLineIndexMap(5, “我有一个心愿”);<br>        //        System.out.println(Json.toJson(map));<br>//                        System.out.println(Json.toJson(m));<br>    }<br>}—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: java实现图片合成&lt;br&gt;date: 2019-01-25 14:23:08&lt;br&gt;tags:&lt;br&gt;package com.tourstock.marketing.utils.wish;&lt;br&gt;import java.awt.BasicStrok
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring cloud 组件</title>
    <link href="https://www.superlee.wang/2018/12/29/spring-cloud-%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.superlee.wang/2018/12/29/spring-cloud-组件/</id>
    <published>2018-12-29T09:54:12.000Z</published>
    <updated>2018-12-29T09:55:49.863Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud技术应用从场景上可以分为两大类：润物无声类和独挑大梁类。</p><p>润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。</p><p>Ribbon，客户端负载均衡，特性有区域亲和、重试机制。</p><p>Hystrix，客户端容错保护，特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离。</p><p>Feign，声明式服务调用，本质上就是Ribbon+Hystrix</p><p>Stream，消息驱动，有Sink、Source、Processor三种通道，特性有订阅发布、消费组、消息分区。</p><p>Bus，消息总线，配合Config仓库修改的一种Stream实现，</p><p>Sleuth，分布式服务追踪，需要搞清楚TraceID和SpanID以及抽样，如何与ELK整合。</p><p>独挑大梁，独自启动不需要依赖其它组件。</p><p>Eureka，服务注册中心，特性有失效剔除、服务保护。</p><p>Dashboard，Hystrix仪表盘，监控集群模式和单点模式，其中集群模式需要收集器Turbine配合。</p><p>Zuul，API服务网关，功能有路由分发和过滤。</p><p>Config，分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式，</p><p>每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。</p><p>Eureka和Ribbon，是最基础的组件，一个注册服务，一个消费服务。</p><p>Hystrix为了优化Ribbon、防止整个微服务架构因为某个服务节点的问题导致崩溃，是个保险丝的作用。</p><p>Dashboard给Hystrix统计和展示用的，而且监控服务节点的整体压力和健康情况。</p><p>Turbine是集群收集器，服务于Dashboard的。</p><p>Feign是方便我们程序员些更优美的代码的。</p><p>Zuul是加在整个微服务最前沿的防火墙和代理器，隐藏微服务结点IP端口信息，加强安全保护的。</p><p>Config是为了解决所有微服务各自维护各自的配置，设置一个同意的配置中心，方便修改配置的。</p><p>Bus是因为config修改完配置后各个结点都要refresh才能生效实在太麻烦，所以交给bus来通知服务节点刷新配置的。</p><p>Stream是为了简化研发人员对MQ使用的复杂度，弱化MQ的差异性，达到程序和MQ松耦合。</p><p>Sleuth是因为单次请求在微服务节点中跳转无法追溯，解决任务链日志追踪问题的。</p><p>特殊成员Zipkin，之所以特殊是因为从jar包和包名来看它不属于Spring Cloud的一员，但是它与Spring Cloud Sleuth的抽样日志结合的天衣无缝。乍一看它与Hystrix的Dashboard作用有重叠的部分，但是他们的侧重点完全不同。Dashboard侧重的是单个服务的统计和是否可用，Zipkin侧重的监控环节时长。简言之，Dashboard侧重故障诊断，Ziokin侧重性能优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Cloud技术应用从场景上可以分为两大类：润物无声类和独挑大梁类。&lt;/p&gt;
&lt;p&gt;润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。&lt;/p&gt;
&lt;p&gt;Ribbon，客户端负载均衡，特性有区域亲和、重试机制。&lt;/p&gt;
&lt;p&gt;Hystrix，客户端容错保护，
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://www.superlee.wang/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>拜占庭将军问题</title>
    <link href="https://www.superlee.wang/2018/10/12/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://www.superlee.wang/2018/10/12/拜占庭将军问题/</id>
    <published>2018-10-12T12:59:05.000Z</published>
    <updated>2018-10-12T12:59:05.397Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作量证明原理</title>
    <link href="https://www.superlee.wang/2018/10/12/%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E%E5%8E%9F%E7%90%86/"/>
    <id>https://www.superlee.wang/2018/10/12/工作量证明原理/</id>
    <published>2018-10-12T12:58:53.000Z</published>
    <updated>2018-12-05T04:29:26.312Z</updated>
    
    <content type="html"><![CDATA[<!-- Google Tag Manager --><p><script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({‘gtm.start’:<br>new Date().getTime(),event:’gtm.js’});var f=d.getElementsByTagName(s)[0],<br>j=d.createElement(s),dl=l!=’dataLayer’?’&amp;l=’+l:’’;j.async=true;j.src=<br>‘<a href="https://www.googletagmanager.com/gtm.js?id=&#39;+i+dl;f.parentNode.insertBefore(j,f)">https://www.googletagmanager.com/gtm.js?id=&#39;+i+dl;f.parentNode.insertBefore(j,f)</a>;<br>})(window,document,’script’,’dataLayer’,’GTM-PDHPFLQ’);</script><br><!-- End Google Tag Manager --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- Google Tag Manager --&gt;
&lt;p&gt;&lt;script&gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({‘gtm.start’:&lt;br&gt;new Date().getTime(),event:’gtm.js’});v
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>八皇后问题递归算法</title>
    <link href="https://www.superlee.wang/2018/10/12/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    <id>https://www.superlee.wang/2018/10/12/八皇后问题递归算法/</id>
    <published>2018-10-12T12:07:05.000Z</published>
    <updated>2018-10-12T12:57:12.209Z</updated>
    
    <content type="html"><![CDATA[<p>八皇后问题的递归实现：</p><p>package com.woqu.payment.constant;</p><p>import java.util.ArrayList;<br>import java.util.List;</p><p>public class NQueenProblem {<br>    private static int n=8;//n皇后问题<br>    private static int total=0;//解法计数</p><pre><code>/** * 递归算法分析皇后可占位情况 * @param queen */public static void analyse(List&lt;Integer[]&gt; queen){    if(queen==null){        queen = new ArrayList&lt;Integer[]&gt;();    }    int length = queen.size();    boolean[] rank = render(queen);    Integer[] currentqueen={-1, -1};    for(int i=0; i&lt;n; i++){        if(rank[i]){//满足条件            currentqueen[0]=i;            currentqueen[1]=length;            queen.add(currentqueen);            if(length==n-1){//到达最后一行                total++;                print(queen);            }            else{                analyse(queen);//递归分析下一皇后的占位            }            queen.remove(currentqueen);//恢复上次递归时的占位状态        }    }}/** * 根据当前皇后占位情况返回下一行中皇后的可占位情况 * @param queen * @return */public static boolean[] render(List&lt;Integer[]&gt; queen){    boolean[] rank = new boolean[n];    for(int i=0; i&lt;n; i++){        rank[i]=true;    }    int y = 0;    if(queen!=null){        y = queen.size();    }    for(int x=0; x&lt;n; x++){        for(int i=0; i&lt;y; i++){            if(x==queen.get(i)[0]||                    x-queen.get(i)[0]==y-queen.get(i)[1]||                    x-queen.get(i)[0]==queen.get(i)[1]-y){                rank[x]=false;                break;            }        }    }    return rank;}/** * 占位可视化 * @param queen */public static void print(List&lt;Integer[]&gt; queen){    System.out.println(&quot;--------&quot;);    for(int y=0; y&lt;queen.size(); y++){        for(int x=0; x&lt;queen.size(); x++){            if(x==queen.get(y)[0] &amp;&amp; y== queen.get(y)[1]){                System.out.print(&quot;o &quot;);            }            else{                System.out.print(&quot;x &quot;);            }        }        System.out.println();    }    System.out.println(&quot;--------&quot;);}public static void main(String[] args) {    long time1 = System.currentTimeMillis();    NQueenProblem.n=8;    NQueenProblem.total=0;    analyse(null);    System.out.println(&quot;solutions: &quot;+total);    long time2 = System.currentTimeMillis();    System.out.println(&quot;spent time: &quot;+(time2-time1)+&quot;ms&quot;);}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;八皇后问题的递归实现：&lt;/p&gt;
&lt;p&gt;package com.woqu.payment.constant;&lt;/p&gt;
&lt;p&gt;import java.util.ArrayList;&lt;br&gt;import java.util.List;&lt;/p&gt;
&lt;p&gt;public class NQ
      
    
    </summary>
    
    
      <category term="算法，递归" scheme="https://www.superlee.wang/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>支付系统开发过程中遇到的问题总结</title>
    <link href="https://www.superlee.wang/2018/06/29/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://www.superlee.wang/2018/06/29/支付系统开发过程中遇到的问题总结/</id>
    <published>2018-06-29T10:04:49.000Z</published>
    <updated>2018-06-29T12:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<p>支付系统中可能会遇到的问题包括：<br>有空再写。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;支付系统中可能会遇到的问题包括：&lt;br&gt;有空再写。。。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="开发问题总结" scheme="https://www.superlee.wang/tags/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>hey,man</title>
    <link href="https://www.superlee.wang/2018/06/15/hey-man/"/>
    <id>https://www.superlee.wang/2018/06/15/hey-man/</id>
    <published>2018-06-15T02:31:14.000Z</published>
    <updated>2018-06-15T02:32:09.392Z</updated>
    
    <content type="html"><![CDATA[<p>hey~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hey~&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="哈哈" scheme="https://www.superlee.wang/tags/%E5%93%88%E5%93%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.superlee.wang/2016/06/11/hello-world/"/>
    <id>https://www.superlee.wang/2016/06/11/hello-world/</id>
    <published>2016-06-11T08:15:41.000Z</published>
    <updated>2018-06-14T12:38:28.871Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
